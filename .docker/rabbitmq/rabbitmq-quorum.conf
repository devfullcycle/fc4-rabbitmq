# Define o mecanismo de descoberta de peers para formação de cluster
# classic_config: usa uma lista estática de nós definida na configuração
# Outras opções: dns, etcd, consul, k8s
cluster_formation.peer_discovery_backend  = classic_config

# Define nós específicos do cluster quando usado classic_config
# Formato: <nome_do_nó>@<hostname>
# Os nós adicionais seriam numerados como .2, .3, etc.
cluster_formation.classic_config.nodes.1  = rabbit@rabbitmq-node1
# cluster_formation.classic_config.nodes.2  = rabbit@rabbitmq-node2
# cluster_formation.classic_config.nodes.3  = rabbit@rabbitmq-node3

# Define como o RabbitMQ lida com partições de rede no cluster
# ignore: não faz nada automaticamente (padrão).
# pause_minority: pausa os nós em minoria para evitar inconsistências (prioriza consistência).
# pause_if_all_down: pausa se todos os nós listados estiverem inativos (admin define preferidos).
# autoheal: reinicia os nós da partição perdedora após o fim da partição (prioriza disponibilidade).
cluster_partition_handling                = autoheal

# Controla o acesso do usuário guest pelo localhost
# false: permite que o usuário guest se conecte de qualquer host (não apenas localhost)
# true (padrão): restringe o usuário guest apenas a conexões localhost
loopback_users.guest                      = false

# Controla se os logs são enviados para o console
# true: exibe logs no console/stdout (útil em containers)
# false: não exibe logs no console
log.console                               = true

# Outras opções comuns não presentes neste arquivo:
# management.tcp.port = 15672            # Porta para o plugin de gerenciamento web
# mqtt.listeners.tcp.default = 1883      # Porta para o protocolo MQTT
# disk_free_limit.absolute = 50MB        # Limite mínimo de espaço em disco
# vm_memory_high_watermark.relative = 0.6 # Limite de uso de memória (60%)