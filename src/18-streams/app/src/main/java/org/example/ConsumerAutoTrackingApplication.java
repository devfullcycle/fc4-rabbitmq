/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.time.Duration;

import com.rabbitmq.stream.*;

public class ConsumerAutoTrackingApplication {

    public static void main(String[] args) throws Exception {

        Environment env = Environment.builder()
                .uri("rabbitmq-stream://admin:admin@rabbitmq-node1:5552")
                .build();
        
        //assercao/declaracao da fila
        env.streamCreator().stream("test-stream").create();


        //algoritmo para outras bibliotecas
        //query do offset
          // a posição
          // erro - first ou next
        // consumer({offset: offsetProcessado}).handle(() => {

        // })

        //consumer (modelo pull)
        Consumer consumer = env
            .consumerBuilder()
            .stream("test-stream")
            .name("test-consumer-auto-tracking")
            .autoTrackingStrategy()
                    .messageCountBeforeStorage(100)
                    .flushInterval(Duration.ofSeconds(10))
              // por numero de mensagens consumidas - 10.000
              // timeout - 5 segundos
            .builder()
            .offset(OffsetSpecification.first())
            .messageHandler((offset, message) -> {
                System.out.println("Received message: " + new String(message.getBodyAsBinary()));
                System.out.println("Offset: " + offset.offset());
            })
            .build();

        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                consumer.close();
                env.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }));
    }
}


//offset lag - o offset lag é a diferença do ultimo offset armazenado e o offset do consumidor