/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.time.Duration;

import com.rabbitmq.stream.*;

public class ConsumerManualTrackingApplication {

    public static void main(String[] args) throws Exception {

        Environment env = Environment.builder()
                .uri("rabbitmq-stream://admin:admin@rabbitmq-node1:5552")
                .build();
        
        //assercao/declaracao da fila
        env.streamCreator().stream("test-stream").create();

        //1 - controle manual sem o rabbitmq - arquivo, db, cache, memoria
        //2 - controle manual com o rabbitmq - offset tracking strategy


        //algoritmo para outras bibliotecas
        //query do offset
          // a posição
          // erro - first ou next
        //let countReadMessages = 0;
        // consumer({offset: offsetProcessado}).handle((message) => {
            //await message.storeOffset();
        // })

        //consumer (modelo pull)
        Consumer consumer = env
            .consumerBuilder()
            .stream("test-stream")
            .name("test-consumer-auto-tracking")
            .manualTrackingStrategy()
            .builder()
            //.noTrackingStrategy()
            // .subscriptionListener(subscription -> {
            //     // subscription.offsetSpecification().getOffset() - onde o consumidor está
            //     //long offset = getOffsetFromDatabase('test-consumer-manual-tracking');
            //     //se não tiver offset, usar OffsetSpecification.first()
            //     //subscription.offsetSpecification(OffsetSpecification.offset(offset));
            // })
            .offset(OffsetSpecification.first())
            .messageHandler((offset, message) -> {
                System.out.println("Received message: " + new String(message.getBodyAsBinary()));
                System.out.println("Offset: " + offset.offset());

                //if(condition){
                   //condicoes - numero de offsets lidos, um evento
                  //storeMyDatabaseOffset('test-consumer-manual-tracking', offset.offset());
                //}

                //if(offset.offset() % 2 == 0) {
                offset.storeOffset(); // Manifesto de armazenar o offset
                //offset = 20 (10 publicadas + 10 do store do offset)
                //}
            })
            .build();
             
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            try {
                consumer.close();
                env.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }));
    }
}


//offset lag - o offset lag é a diferença do ultimo offset armazenado e o offset do consumidor