/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import com.rabbitmq.stream.*;

public class ProducerApplication {

    public static void main(String[] args) throws Exception {

        Environment env = Environment.builder()
                .uri("rabbitmq-stream://admin:admin@rabbitmq-node1:5552")
                .build();
        
        //assercao/declaracao da fila
        env.streamCreator().stream("test-stream").create();

        //producer name + publishing id !== messageId
        //producer name = producer-test
        //publishing id = 1
        //messageId = uuid, hash, etc, etc

        //producer
        Producer producer = env.producerBuilder()
                        .stream("test-stream")
                        //.name("producer-test") //apenas para deduplicação de mensagens
                        .build();

        //definição da mensagem
        Message message = producer.messageBuilder()
                    // .publishingId(1) //opcional, pode ser usado para deduplicação
                    // .properties()
                    //     .messageId("1") 
                    // .messageBuilder()
                    .addData("Hello World!".getBytes())
                    .build();


        CountDownLatch publishConfirmLatch = new CountDownLatch(1);

        //send message
        producer.send(message, confirmStatus -> {
            if(confirmStatus.isConfirmed()){
                System.out.println("Message sent successfully!");
            } else {
                System.out.println("Message sending failed: " + confirmStatus.getMessage());
            }
            publishConfirmLatch.countDown();
        });

        publishConfirmLatch.await(10, TimeUnit.SECONDS);

        producer.close();

        env.close();
    }
}
